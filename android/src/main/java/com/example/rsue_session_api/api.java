// Autogenerated from Pigeon (v4.2.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class api {

  public enum MarkType {
    EXAM(0),
    PRACTISE(1),
    CREDIT(2);

    private final int index;
    private MarkType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScheduleOfExam {
    private @NonNull MarkType mark;
    public @NonNull MarkType getMark() { return mark; }
    public void setMark(@NonNull MarkType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mark\" is null.");
      }
      this.mark = setterArg;
    }

    private @NonNull String dateTime;
    public @NonNull String getDateTime() { return dateTime; }
    public void setDateTime(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dateTime\" is null.");
      }
      this.dateTime = setterArg;
    }

    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @Nullable List<String> teachers;
    public @Nullable List<String> getTeachers() { return teachers; }
    public void setTeachers(@Nullable List<String> setterArg) {
      this.teachers = setterArg;
    }

    private @NonNull String room;
    public @NonNull String getRoom() { return room; }
    public void setRoom(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"room\" is null.");
      }
      this.room = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private ScheduleOfExam() {}
    public static final class Builder {
      private @Nullable MarkType mark;
      public @NonNull Builder setMark(@NonNull MarkType setterArg) {
        this.mark = setterArg;
        return this;
      }
      private @Nullable String dateTime;
      public @NonNull Builder setDateTime(@NonNull String setterArg) {
        this.dateTime = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable List<String> teachers;
      public @NonNull Builder setTeachers(@Nullable List<String> setterArg) {
        this.teachers = setterArg;
        return this;
      }
      private @Nullable String room;
      public @NonNull Builder setRoom(@NonNull String setterArg) {
        this.room = setterArg;
        return this;
      }
      public @NonNull ScheduleOfExam build() {
        ScheduleOfExam pigeonReturn = new ScheduleOfExam();
        pigeonReturn.setMark(mark);
        pigeonReturn.setDateTime(dateTime);
        pigeonReturn.setName(name);
        pigeonReturn.setTeachers(teachers);
        pigeonReturn.setRoom(room);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(mark == null ? null : mark.index);
      toListResult.add(dateTime);
      toListResult.add(name);
      toListResult.add(teachers);
      toListResult.add(room);
      return toListResult;
    }
    static @NonNull ScheduleOfExam fromList(@NonNull ArrayList<Object> list) {
      ScheduleOfExam pigeonResult = new ScheduleOfExam();
      Object mark = list.get(0);
      pigeonResult.setMark(mark == null ? null : MarkType.values()[(int)mark]);
      Object dateTime = list.get(1);
      pigeonResult.setDateTime((String)dateTime);
      Object name = list.get(2);
      pigeonResult.setName((String)name);
      Object teachers = list.get(3);
      pigeonResult.setTeachers((List<String>)teachers);
      Object room = list.get(4);
      pigeonResult.setRoom((String)room);
      return pigeonResult;
    }
  }
  private static class ScheduleAPICodec extends StandardMessageCodec {
    public static final ScheduleAPICodec INSTANCE = new ScheduleAPICodec();
    private ScheduleAPICodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ScheduleOfExam.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ScheduleOfExam) {
        stream.write(128);
        writeValue(stream, ((ScheduleOfExam) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ScheduleAPI {
    @NonNull List<ScheduleOfExam> getAllGroups(@NonNull byte[] file);
    @NonNull ScheduleOfExam getGroupByName(@NonNull byte[] file, @NonNull String name);

    /** The codec used by ScheduleAPI. */
    static MessageCodec<Object> getCodec() {
      return       ScheduleAPICodec.INSTANCE;    }
    /**Sets up an instance of `ScheduleAPI` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ScheduleAPI api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScheduleAPI.getAllGroups", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              byte[] fileArg = (byte[])args.get(0);
              if (fileArg == null) {
                throw new NullPointerException("fileArg unexpectedly null.");
              }
              List<ScheduleOfExam> output = api.getAllGroups(fileArg);
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScheduleAPI.getGroupByName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              byte[] fileArg = (byte[])args.get(0);
              if (fileArg == null) {
                throw new NullPointerException("fileArg unexpectedly null.");
              }
              String nameArg = (String)args.get(1);
              if (nameArg == null) {
                throw new NullPointerException("nameArg unexpectedly null.");
              }
              ScheduleOfExam output = api.getGroupByName(fileArg, nameArg);
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add("Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
