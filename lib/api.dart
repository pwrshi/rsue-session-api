// Autogenerated from Pigeon (v4.2.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum MarkType {
  exam,
  practise,
  credit,
}

class SubjectInfo {
  SubjectInfo({
    required this.mark,
    required this.dateTime,
    required this.name,
    this.teachers,
    this.rooms,
  });

  MarkType mark;

  String dateTime;

  String name;

  List<String?>? teachers;

  List<String?>? rooms;

  Object encode() {
    return <Object?>[
      mark.index,
      dateTime,
      name,
      teachers,
      rooms,
    ];
  }

  static SubjectInfo decode(Object result) {
    result as List<Object?>;
    return SubjectInfo(
      mark: MarkType.values[result[0]! as int]
,
      dateTime: result[1]! as String,
      name: result[2]! as String,
      teachers: (result[3] as List<Object?>?)?.cast<String?>(),
      rooms: (result[4] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class GroupSchedule {
  GroupSchedule({
    required this.name,
    required this.exams,
  });

  String name;

  List<SubjectInfo?> exams;

  Object encode() {
    return <Object?>[
      name,
      exams,
    ];
  }

  static GroupSchedule decode(Object result) {
    result as List<Object?>;
    return GroupSchedule(
      name: result[0]! as String,
      exams: (result[1] as List<Object?>?)!.cast<SubjectInfo?>(),
    );
  }
}

class _ScheduleAPICodec extends StandardMessageCodec {
  const _ScheduleAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is GroupSchedule) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is SubjectInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return GroupSchedule.decode(readValue(buffer)!);
      
      case 129:       
        return SubjectInfo.decode(readValue(buffer)!);
      
      default:

        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ScheduleAPI {
  /// Constructor for [ScheduleAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ScheduleAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ScheduleAPICodec();

  Future<List<GroupSchedule?>> getAllGroups(Uint8List arg_file) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScheduleAPI.getAllGroups', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_file]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<GroupSchedule?>();
    }
  }

  Future<GroupSchedule> getGroupByName(Uint8List arg_file, String arg_name) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScheduleAPI.getGroupByName', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_file, arg_name]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as GroupSchedule?)!;
    }
  }
}
